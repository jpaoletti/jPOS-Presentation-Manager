/*
 * jPOS Project [http://jpos.org]
 * Copyright (C) 2000-2010 Alejandro P. Revilla
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License as
 * published by the Free Software Foundation, either version 3 of the
 * License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
package org.jpos.ee.pm.core.monitor;

import java.util.ArrayList;
import java.util.List;
import java.util.Observable;
import java.util.Observer;

import org.jpos.ee.pm.core.PMService;

/** A monitor that watch something showing his status.
 * 
 * @author jpaoletti jeronimo.paoletti@gmail.com
 * @see http://github.com/jpaoletti/jPOS-Presentation-Manager
 * 
 * */
public class Monitor extends Observable implements Runnable{
    private PMService service;
    private Thread thread;
    
    /**The id of the monitor. Must be unique*/
    private String id;
    
    /**The source of the monitor information
     * @see MonitorSource*/
    private MonitorSource source;
    
    /**A formatter for each line generated by monitor.
     * @see MonitorFormatter */
    private MonitorFormatter formatter;
    
    /**Delay between monitor refreshes in milliseconds*/
    private Integer delay;
    
    /**Maximum number of lines displayed at a time*/
    private Integer max;
    
    /**Clean up after each refresh*/
    private Boolean cleanup;
    
    /**Ignore actual and always get everything*/
    private Boolean all;
    
    public Monitor() {
        super();
    }

    public synchronized void addObserver(Observer o) {
        super.addObserver(o);
        //Interrupts the sleeping Monitor
        if(countObservers()==1){
            thread.interrupt();
        }
    }

    private Object actual = null;

    public void run() {
        while(true){
            if(countObservers()==0){
                try {
                    Thread.sleep(Long.MAX_VALUE);
                } catch (InterruptedException e) {}
            }else{
                startWatching();
                while(countObservers()>0){
                    getNewLines();
                    try {
                        Thread.sleep(getDelay());
                    } catch (InterruptedException e) {}
                }
            }
        }
    }
    
    public void startWatching(){
        try {
            MonitorLine line = getSource().getLastLine();
            actual = (line!=null)?line.getId():null;
            if(line!=null)
                notifyObservers(getFormatter().format(line));
        } catch (Exception e) {
            notifyObservers(e);
        }        
    }
    
    public void getNewLines(){
        List<String> result = new ArrayList<String>();
        try {
            List<MonitorLine> lines;
            if(getAll()){
                lines = getSource().getLinesFrom(null);
            }else{
                lines = getSource().getLinesFrom(actual);
            }
            if(lines.size() > 0){
                for (MonitorLine line : lines) {
                    result.add(getFormatter().format(line));
                }
                actual = lines.get(lines.size()-1).getId();
                setChanged();
                notifyObservers(result);
            }
        } catch (Exception e) {
            notifyObservers(e);
        }
    }

    /**
     * @return the id
     */
    public String getId() {
        return id;
    }

    /**
     * @param id the id to set
     */
    public void setId(String id) {
        this.id = id;
    }

    /**
     * @return the source
     */
    public MonitorSource getSource() {
        return source;
    }

    /**
     * @param source the source to set
     */
    public void setSource(MonitorSource source) {
        this.source = source;
    }

    /**
     * @return the formatter
     */
    public MonitorFormatter getFormatter() {
        return formatter;
    }

    /**
     * @param formatter the formatter to set
     */
    public void setFormatter(MonitorFormatter formatter) {
        this.formatter = formatter;
    }

    /**
     * @param delay the delay to set
     */
    public void setDelay(Integer delay) {
        this.delay = delay;
    }

    /**
     * @return the delay
     */
    public Integer getDelay() {
        if(delay==null) return 5000;
        return delay;
    }

    /**
     * @param max the max to set
     */
    public void setMax(Integer max) {
        this.max = max;
    }

    /**
     * @return the max
     */
    public Integer getMax() {
        if(max==null) return 100;
        return max;
    }

    /**
     * @param cleanup the cleanup to set
     */
    public void setCleanup(Boolean cleanup) {
        this.cleanup = cleanup;
    }

    /**
     * @return the cleanup
     */
    public Boolean getCleanup() {
        if(cleanup==null) return false;
        return cleanup;
    }

    /**
     * @param all the all to set
     */
    public void setAll(Boolean all) {
        this.all = all;
    }

    /**
     * @return the all
     */
    public Boolean getAll() {
        if(all == null) return false;
        return all;
    }

    /**
     * @param service the service to set
     */
    public void setService(PMService service) {
        this.service = service;
    }

    /**
     * @return the service
     */
    public PMService getService() {
        return service;
    }

    /**
     * @param thread the thread to set
     */
    public void setThread(Thread thread) {
        this.thread = thread;
    }

    /**
     * @return the thread
     */
    public Thread getThread() {
        return thread;
    }
}